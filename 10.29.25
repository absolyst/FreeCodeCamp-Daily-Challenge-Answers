###
October 29, 2025

Email Sorter

On October 29, 1971, the first email ever was sent, introducing the username@domain format we still use. Now, there are billions of email addresses.

In this challenge, you are given a list of email addresses and need to sort them alphabetically by domain name first (the part after the @), and username second (the part before the @).

    Sorting should be case-insensitive.
    If more than one email has the same domain, sort them by their username.
    Return an array of the sorted addresses.
    Returned addresses should retain their original case.

For example, given ["jill@mail.com", "john@example.com", "jane@example.com"], return ["jane@example.com", "john@example.com", "jill@mail.com"].
###

def sort(emails):

    sortedEmailDict = {}
    for email in emails:
        atLocation = email.find('@')
        domain = email[atLocation + 1:].lower()                                          #Ensure sorting by domain is case insensitive
        if domain not in sortedEmailDict.keys():
            sortedEmailDict.setdefault(domain, [email])                                  #If first value encountered, set initial array of dict entry
        else:
            sortedEmailDict[domain].append(email)                                        #If adding to existing array, append then sort resulting
            sortedEmailDict[domain] = sorted(sortedEmailDict[domain], key=str.lower)     #Use key to ensure sorting by username is also case insensitive

    sortedEmails = []
    sortedKeys = sorted(sortedEmailDict)                                                 #Ensure keys are sorted
    for key in sortedKeys:                                                               #Outermost loop goes through domains (keys), inner loop goes through usernames(values), so domain sort takes precendence 
        for value in sortedEmailDict[key]:
            sortedEmails.append(str(value))
    return sortedEmails
